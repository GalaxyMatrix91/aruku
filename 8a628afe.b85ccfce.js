(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{146:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return p})),a.d(n,"metadata",(function(){return i})),a.d(n,"rightToc",(function(){return c})),a.d(n,"default",(function(){return l}));var t=a(1),r=a(9),o=(a(0),a(155)),p={id:"example",title:"Example"},i={id:"example",title:"Example",description:"---",source:"@site/../modules/aruku-docs/target/mdoc/example.md",permalink:"/aruku/docs/example",editUrl:"https://github.com/pierrenodet/aruku/edit/master/../modules/aruku-docs/target/mdoc/example.md",sidebar:"someSidebar",previous:{title:"Provided Walks",permalink:"/aruku/docs/walks"}},c=[],s={rightToc:c};function l(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},s,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("hr",null),Object(o.b)("p",null,"Let's generate a graph with GraphX and run node2vec on it !"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-scala"}),'import org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.graphx._\nimport org.apache.spark._\n\nimport aruku.walks._\nimport aruku._\nimport aruku.implicits._\n\nobject Main extends App {\n\n    //Start SparkContext\n    val sc = SparkContext.getOrCreate(\n      new SparkConf()\n        .setMaster("local[*]")\n        .setAppName("example")\n        .set("spark.graphx.pregel.checkpointInterval", "1")\n    )\n    sc.setCheckpointDir("checkpoint")\n\n    //Generate Graph\n    val numVertices = 150000\n    val graph: Graph[Long, Int] =\n      GraphGenerators\n        .logNormalGraph(sc, numVertices = numVertices)\n\n    //Node2Vec Configuration\n    val numWalkers = 150000\n    val walkLength = 80\n    val p          = 0.5\n    val q          = 2\n\n    //Execute Random Walk\n    val paths =\n      graph.randomWalk(edge => edge.attr.toDouble, EdgeDirection.Out)\n    (Node2Vec.config(numWalkers), Node2Vec.transition(p, q, walkLength))\n\n    //Print 10 first Random Walks\n    paths.take(10).foreach { \n        case (walkerId, path) => println(walkerId, path.mkString(",")) \n    }\n\n}\n\n')))}l.isMDXComponent=!0}}]);