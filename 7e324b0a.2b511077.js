(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{145:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return l})),t.d(a,"rightToc",(function(){return u})),t.d(a,"default",(function(){return s}));var n=t(1),r=t(9),i=(t(0),t(155)),o={id:"configuration",title:"Configuration"},l={id:"configuration",title:"Configuration",description:"## Walker ",source:"@site/../modules/aruku-docs/target/mdoc/configuration.md",permalink:"/aruku/docs/configuration",editUrl:"https://github.com/pierrenodet/aruku/edit/master/../modules/aruku-docs/target/mdoc/configuration.md",sidebar:"someSidebar",previous:{title:"Walk Engine",permalink:"/aruku/docs/engine"},next:{title:"Transition Probability",permalink:"/aruku/docs/transition"}},u=[{value:"Walker",id:"walker",children:[]},{value:"Walker Configuration",id:"walker-configuration",children:[]},{value:"Walker Engine Configuration",id:"walker-engine-configuration",children:[]}],c={rightToc:u};function s(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"walker"},"Walker"),Object(i.b)("p",null,"A walker is a simple scala case class that contains an id, a step count and a data :"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:'title="modules/aruku/Walkerscala"',title:'"modules/aruku/Walkerscala"'}),"case class Walker[T](\n  id: Long,\n  step: Long,\n  data: T\n)\n")),Object(i.b)("p",null,"But you can't make one by yourself, they are automatically generated by aruku thanks to the walker configuration."),Object(i.b)("h2",{id:"walker-configuration"},"Walker Configuration"),Object(i.b)("p",null,"The walker configuration defines how many walkers will be doing random walks, how a walker is initialized, how it's updated and how it's affected to a vertice."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'}),"case class WalkerConfig[T](\n  numWalkers: Long,\n  init: VertexId => T,\n  update: (Walker[T], VertexId, Edge[Double]) => T,\n  start: StartingStrategy\n)\n")),Object(i.b)("p",null,"It can be either constant, as the walker is not updated at every step. DeepWalk is one example of such a walker configuration :"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'}),"object WalkerConfig {\n\n  def constant[T](\n    numWalkers: Long,\n    init: VertexId => T,\n    start: StartingStrategy\n  )\n\n}\n")),Object(i.b)("p",null,"Or dynamic if we need to update the data of the walker at every step."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:'title="modules/aruku/WalkerConfig.scala"',title:'"modules/aruku/WalkerConfig.scala"'}),"object WalkerConfig {\n\n  def dynamic[T](\n    numWalkers: Long,\n    init: VertexId => T,\n    update: (Walker[T], VertexId, Edge[Double]) => T,\n    start: StartingStrategy\n  ) \n\n}\n")),Object(i.b)("h2",{id:"walker-engine-configuration"},"Walker Engine Configuration"),Object(i.b)("p",null,"You can configure the engine itself at the moment with the ",Object(i.b)("inlineCode",{parentName:"p"},'"spark.graphx.pregel.checkpointInterval"')," at the moment in order to break the lineage of the random walk if you are doing a lot of steps."))}s.isMDXComponent=!0}}]);